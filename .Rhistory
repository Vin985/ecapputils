library(ecapputils)
library(ecapputils)
dir <- "c:/dev/EC"
file <- "app.conf"
fread(file.path(dir, file))
library(data.table)
fread(file.path(dir, file))
?fread
fread(file.path(dir, file), sep="=")
?exists
exists(APP_CONF)
?read.delim
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
t <- "TEST"
assign(t, 3)
TEST
shiny::actionButton
shiny::actionLink(
;
shiny::actionLink
htmltools::a
library(shiny)
validateIcon
??validateIcon
shiny:::validateIcon(
shiny:::validateIcon(;
shiny:::validateIcon
actionButton
tags$a
library(ecapputils)
library(ecapputils)
library(ecapputils)
debug(runjs)
shiny::runApp('C:/dev/EC/cruiseCompare')
shiny::runApp('C:/dev/EC/cruiseCompare')
runApp('C:/dev/EC/cruiseCompare')
shiny::runApp('C:/dev/EC/welcomeApp')
shiny::runApp('C:/dev/EC/welcomeApp')
runApp('C:/dev/EC/welcomeApp')
runApp('C:/dev/EC/welcomeApp')
runApp('C:/dev/EC/welcomeApp')
shiny::runApp('C:/dev/EC/welcomeApp')
library(ecapputils)
library(ecapputils)
library(ecapputils)
getwd()
readAppConf("..")
library(ecapputils)
readAppConf("..")
readAppConf("..", "appconf2.csv")
readAppConf("..", "appconf2.csv")
conf
readAppConf("..", "appconf2.csv")
missing
readAppConf("..", "appconf2.csv")
library(ecapputils)
library(ecapputils)
readAppConf("..", "appconf2.csv")
readAppConf("..", "appconf2.csv")
readAppConf("..", "appconf2.csv")
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
?substr
?gsub
gsub("%LANG%", "fr", "test-%LANG%")
library(ecapputils)
shiny::runApp('C:/dev/EC/cruiseCompare')
shiny::runApp('C:/dev/EC/cruiseCompare')
library(ecapputils)
library(ecapputils)
a <- function(a) {if (!exists(a)) print "toto" }
a <- function(a) {if (!exists(a)) print("toto") }
r <- 1
a(r)
a <- function(a) {if (!exists("a")) print("toto") }
a(r)
a(t)
get("t")
a(t2)
t2
get("t2")
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
s <- "sylvain christin"
as.numeric(s)
?`raw-class`
charToRaw(str)
lapply(str, charToRaw)
lapply(str, charToRaw)[[1]]
?charToRaw
charToRaw(s)
paste(charToRaw(s), collapse = "_")
paste(charToRaw(s), collapse = "%")
a <- paste(charToRaw(s), collapse = "%")
strsplit(a, "%")
strsplit(a, "%")[[1]]
b <- strsplit(a, "%")[[1]]
as.numeric(b)
as.raw(b)
r <- charToRaw(s)
str(r)
rawToBits(r)
b
rawToChar(b)
strtoi(charToRaw(s),16L)
b <- strtoi(charToRaw(s),16L)
as.raw(b)
rawtoChar(as.raw(b))
rawToChar(as.raw(b))
a <- "1231241521_1_"
b2 <- paste(b, collapse = "%")
b2
a2 <- paste(a, b2, sep="")
a2
strsplit(a2, "_")
ss <- strsplit(a2, "_")
unlist(strsplit(ss[[3]], "%"))
unlist(strsplit(ss[3], "%"))
ss[3]
unlist(ss)
?strsplit
strsplit(unlist(ss)[3]), "%")
strsplit(unlist(ss)[3], "%")
u <- unlist(ss)
rawToChar(as.raw(as.numeric(unlist(strsplit(u[3], "%")))))
s2 <- "sylvainé christin"
strtoi(charToRaw(s),16L)
s2 <- "sylvainéçç christin"
strtoi(charToRaw(s),16L)
strtoi(charToRaw(s2),16L)
library(ecapputils)
library(ecapputils)
library(ecapputils)
library(ecapputils)
